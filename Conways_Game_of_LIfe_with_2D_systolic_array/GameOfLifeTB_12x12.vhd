--Entity Name: 
-- 	GameOfLifeTB_12x12
--
--Description: 
-- 	This is a testbench for Conway's Game of Life for 12x12 grid. (MESH_SIZE = 12)
--  The patterns and testvectors for this testbench are generated by using Python.
--  It verifies the cellular automata with different initial patterns. For each pattern, it checks the change of
--  states over NUM_EPOCHS epochs. At every epoch, the testbench verifies if the transition of states on the grid
--  are all correct.
--  The pattern tested in this testbench is
--
--  Initial Pattern: A heavyweight spacecraft in the middle and two gliders on the corners
--  
--  The initial pattern vector is shifted in to the array in the reverse order, and the output data is verified 
--  with the testvectors in the same order as well.
--
--  Note that all possible cases of different situations (neighbors = 0, 1, ..7, 8) are fully covered throughout 
--  the testbench for 5x5 grid, the testbench for 6x6 grid, and the testbench for 12x12 grid.
--
--Revision History
--	03/10/2019	Sung Hoon Choi	Created
--  03/11/2019  Sung Hoon Choi  Initial simulation
--  03/14/2019  Sung Hoon Choi  Updated comments


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity GameOfLifeTB is
end GameOfLifeTB;

architecture Behavioral of GameOfLifeTB is

component GameOfLife is
generic(MESH_SIZE: natural := 5);
port(
    Clk: in std_logic;
    NextTimeTick: in std_logic;
    Shift: in std_logic;
    DataIn: in std_logic;
    DataOut: out std_logic
    );
end component;

-- The size of the mesh to be tested
constant TEST_MESH_SIZE : natural := 12;
-- The total number of cells
constant GRID_SIZE: natural := TEST_MESH_SIZE**2;

-- System clock
signal Clk: std_logic := '1';
-- When active, cells change the state based on the rule on the clock rising edge
signal NextTimeTick: std_logic := '0';
-- When active, cells shift data on the clock rising edge
signal Shift: std_logic := '0';
-- Data to be shifted in to the array
signal DataIn:std_logic;
-- Data to be shifted out from the array
signal DataOut:std_logic;
-- Notifies the end of simulation
signal END_SIM:std_logic := '0';

-- Number of epochs to verify the change of patterns over time
constant NUM_EPOCHS : natural := 6;
-- Number of initial patterns to be tested
constant NUM_PATTERNS : natural := 1;
-- Type definition for the testvectors that verify the change of patterns over different epochs
type GameOfLifeTestVecType is array(0 to NUM_EPOCHS-1) of std_logic_vector(0 to GRID_SIZE-1);

-- Heavyweight spacecraft with two gliders on the corners
signal HeavySpaceAndTwoGliders: std_logic_vector(0 to GRID_SIZE-1) := 
"010000000000001000000000111000000000000000000000000011000000001000010000010000000000010000010000011111100000000000001000000000000100000000011100";
-- Heavyweight spacecraft with two gliders testvectors (epoch 1 ~ epoch 6)
signal HeavySpaceAndTwoGlidersTestvector: GameOfLifeTestVecType := ( 
"000000000000101000000000011000000000010000000000000000000000000000000000011000000000110111100000011111110000001111000000000000010100000000001100",
"000000000000001000000000101000000000011000000000000000000000000000000000111111000000100000010000100000010000010000011000000110000100000000001100",
"000000000000010000000000001100000000011000000000000000000000011110000000111110000000101110100000110000110000000000011000000000010100000000001100",
"000000000000001000000000000100000000011100000000000000000000100010000000100000000000000010110000111101101000000000000000000000010100000000001100",
"000000000000000000000000010100000000001100000000011100000000000000000000000001000000101110110000011111100000011000111000000000000100000000001100",
"000000000000000000000000000100000000000010000000010100000000001000000000000111100000000000010000100000001000010010111000000000000100000000001100");
                                                      
begin
	-- Instantiate the entity to verify
    UUT: GameOfLife 
        generic map(MESH_SIZE => TEST_MESH_SIZE)
        port map(
            Clk => Clk,
            NextTimeTick => NextTimeTick,
            Shift => Shift,
            DataIn => DataIn,
            DataOut => DataOut
            );
			
-- Generate the system clock
Clk <= not Clk after 50 ns;

-- Go through testing different initial patterns. 
-- Check the correctness at every epoch. (Epoch1: states after 1 tick / Epoch2: states after 2 ticks / ..)
-- Between every epoch it resets the grid to test new epochs.
-- It shifts in the data into array by using the pattern vectors in the reverse order. 
-- For every test routine, it shifts out the data from the array and compare the data with the testvectors in the
-- reverse order.
-- After going thorugh all NUM_PATTERNS test cases (and NUM_EPOCHS test epochs for each pattern), it sets the
-- END_SIM signal to notify that the simulation is done.
process
begin
    DataIn <= '0';
	-- Wait before starting the simulation
    wait for 80 ns;
		-- Outer loop to test the cellular automata at every epoch
        for epoch in 0 to NUM_EPOCHS-1 loop
			-- Shift in the initial pattern
            Shift <= '1';
            for i in 0 to GRID_SIZE-1 loop
                DataIn <= HeavySpaceAndTwoGliders(GRID_SIZE-i-1); -- Shift in the pattern
                wait for 100 ns;
            end loop;
			-- Since we are done with shifting in the initial pattern, let's run the cellular automata
            Shift <= '0';
			-- Activate the NextTimeTick based on the epoch
			-- For example, if epoch=1, activate NextTimeTick for one cycle
			--              if epoch=2, activate NextTimeTick for two cycles
             for tick in 0 to epoch loop
                 NextTimeTick <= '1';
                 wait for 100 ns;
             end loop;
			-- Since we are done with running the cellular automata, let's shift out the data to check if the 
			-- result is correct
            NextTimeTick <= '0';
            Shift <= '1';
            for i in 0 to GRID_SIZE-1 loop
				-- Compare the result with the testvector
                    assert(std_match(DataOut, HeavySpaceAndTwoGlidersTestvector(epoch)(GRID_SIZE-1-i)))
                    report "Error: DataOut does not match the expected value"
                        severity ERROR;   
                wait for 100 ns;
            end loop;  
        end loop;
	-- Simulation complete
    END_SIM <= '1';   
    wait;
end process;

end Behavioral;
